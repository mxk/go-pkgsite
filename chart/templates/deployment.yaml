apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}
  labels:
    {{- include "go-pkgsite.labels" . | nindent 4 }}
spec:
  selector:
    matchLabels:
      {{- include "go-pkgsite.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        {{- include "go-pkgsite.labels" . | nindent 8 }}
    spec:
      initContainers:
      - name: wait-for-db
        image: {{ include "postgresql.v1.image" .Subcharts.postgresql }}
        env:
        - name: PGHOST
          value: &pgHost "{{ include "postgresql.v1.primary.fullname" .Subcharts.postgresql }}"
        - name: PGPASSWORD
          valueFrom: &pgPass
            secretKeyRef:
              name: {{ include "postgresql.v1.secretName" .Subcharts.postgresql }}
              key: {{ include "postgresql.v1.adminPasswordKey" .Subcharts.postgresql }}
        command: [ 'sh', '-c', 'until pg_isready -U postgres; do echo waiting for database; sleep 1; done;' ]
      - name: create-db
        image: mxkh/go-pkgsite
        env: &dbEnv
        - name: GO_DISCOVERY_DATABASE_HOST
          value: *pgHost
        - name: GO_DISCOVERY_DATABASE_PASSWORD
          valueFrom: *pgPass
        command: [ './db', 'create' ]
      - name: migrate-db
        image: mxkh/go-pkgsite
        env:
          *dbEnv
        command:
        - ./migrate
        - -source=file:migrations
        - -database=postgresql://postgres:$(GO_DISCOVERY_DATABASE_PASSWORD)@$(GO_DISCOVERY_DATABASE_HOST):5432/discovery-db?sslmode=disable
        - up
      containers:
      - name: frontend
        image: mxkh/go-pkgsite
        imagePullPolicy: Always
        env:
          *dbEnv
        args:
        - -bypass_license_check
        - -host=:80
        - -local
        - -proxy_url=http://{{ with .Subcharts.athens }}{{ include "fullname" . }}:{{ .Values.service.servicePort }}{{ end }}/
        ports:
        - name: http
          containerPort: 80
        startupProbe:
          httpGet: { port: http }
          periodSeconds: 1
          failureThreshold: 60
        livenessProbe:
          httpGet: { port: http }
          failureThreshold: 3
        readinessProbe:
          httpGet: { port: http }
          failureThreshold: 1
